
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ihvgtaxvrqdnrgdddhdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imlodmd0YXh2cnFkbnJnZGRkaGR4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxOTAwMTQsImV4cCI6MjA2MTc2NjAxNH0.zwjvn4wy33o_nYHuwNXI6aHTQWLx1-XriImQxj4tPfg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create an untyped client to avoid TypeScript errors until types are regenerated
export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type extension for message operations
export const messageApi = {
  async sendMessage(message: { 
    sender_id: string;
    recipient_id: string; 
    content: string;
    assignment_id?: string | null;
  }) {
    return supabase.from('messages').insert({
      ...message,
      read: false,
    });
  },
  
  async getConversation(userId: string, otherId: string) {
    return supabase
      .from('messages')
      .select('*')
      .or(`sender_id.eq.${userId},recipient_id.eq.${userId}`)
      .or(`sender_id.eq.${otherId},recipient_id.eq.${otherId}`)
      .order('created_at', { ascending: true });
  },
  
  async markAsRead(messageIds: string[]) {
    return supabase
      .from('messages')
      .update({ read: true })
      .in('id', messageIds);
  }
};

// Helper function for anonymous submissions
export const submitAnonymousAssignment = async (assignmentData: any) => {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/assignments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Prefer': 'return=representation'
      },
      body: JSON.stringify({
        ...assignmentData,
        user_id: null // Using null for anonymous submissions following our migration
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to submit assignment');
    }

    return await response.json();
  } catch (error) {
    console.error('Error submitting anonymous assignment:', error);
    throw error;
  }
};
